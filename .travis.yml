sudo: required
dist: trusty

env:
  matrix:
  global:
    - TILEDB_BUILD_DIR=$TRAVIS_BUILD_DIR/build
    - secure: uNzSonKRBZyhQ5+O96XNBYEa/Br2PFde4/+C2pOp3LnJ/6QCTEb1QiPaf0Qf7esXVlsTncQHZ5L8is60zDcfXxJi5vjYNRWqZFKnCEQkgTHCwXBACcKXmIG+ZpYOJNbI1D0kky9j98SnAzU5nVvXXfYaR5Ras2f/EzihmLvRW1t8RCPa/6px2Am14ye5iWSstCtzxd/z9rzECwVry/rYj1ElWynEe16QH3KhPmrj7oLMznSluOcVeikBR7YXsP6r7ewjjNU1VpFd3dau6LpHutG9yPwQ7akWvnXm5mWRqBoWMP/B9HAro8bRrRwuvNkuAbc8m/SY6lfk3rkarQftlQQ92mig3mjQdodvftB2KMdgP43jITYG7PqwW6d3XIDhcJ3CCO7PX8tjuosVCVTMcKpXnh4Q4LeQtmrgfOzwnJvo7z/RF6gLFpWvi0jwjhP18wURbcT02FpFBKvrGJzqCZYXcU6V3l2OUwMYiz+bxLgRiwweEp3meJ5T8pHBYSadaDDBo79qk5OW4sxwjW2gDCB++y6fUdw8ukpYYEsE2Jvo35zGH/mZgTZWPKIwk7qPJ3xcRx+/L/2MQp4d6aGQGO3dQ6BVamMwPZCJRZkWGj/UPQGNV1e+4lqlBwAFVp0T618S7y0P59mLkYaPpS2vpF7xMfTasz1iAvf7oPIH9cI=
    - secure: BPx7QqahgBo4h3tOP9hfQWV3YP9IDfmZzbDmzbhwZSr/098ukQu75sRbbWb7o8ZwNTTJAJPF9ykK/RzUMfDVUe3IazdLsR3M0G/KAUZZ4cSHlKYu+GNxO5wjQ3c5P7UWnmRpHRnJNC1GQy1fhA/GiUeKVbDV4HGF1cw4nTkeVG+AJcCrRiSOhzGc/9nCNlHCRGW03G6fOV+M+vK9ObTT6sQ2jv2z+ki+QZnYhxGOmFSEGEKSVnn0ZflpMh+DojgQXRVpVFOB/73Y1karg2sKPAmuEz0fPb8twrrQgjRotdprN9ClMz83a/Co8Pwx7mXKTKVO8+6dEu1aChHvFMksRzuVmznygFr+ROzYbRyYgoD7K/i//HioUIhrKpxD/3BSRE3El2dKHisd44cBVLk2K4FUtsGGxaLIg5CjmzNbJ6hAI0aQ85HW1WCdDzK+XMSVqQXmZ4VdYJFVyrBsvmRGybfzxkFhFCJa0rE2Mn8vQx+kCrJ7nx4NZ6Hx6UD1dTz4p6vkLvAGEMHgT1rE4cMywogjKmQfQoNrpQkQv2tIBUeREsIb3Zve2/IYEGKMcBDGm9z2sxXfzYI4oaXt4mRkJmgMZt8IeJPVr896O2rF/bEBLxlPGXgq3r5H4fP8neQZlLNsyXP/K9p2MOUBVPQtgIf269IUY+mDze0bgBB2fWE=
    - secure: WdlUQwwK7P6k2oZI9Hup7AlWzQWGMjyUtUY3Hrb9PPK8pyNxxB4XFdZaydjkmZXjyXh1aRWGO9qg9YWdBJacGGn+sGE+vD42HjLCL3Op/NcJsw8/9yQB5sDDZJ5bhMhf6WQoyYerwKtDaqLxVv3TMcp27yPtGSFbfD79w1CuBYBAjJoPMHv4gIaCr0/R34xH9kfj1kTtEX8PbN+Vmd5UdPiAJUPaS16JIYkfXJ3nBX4q0wzlOurtjo0wmeRDGJK3cbe92REdp6ziKtJpfepZXki39LN7WMOaN4oPIY/dcRfkZhSeqzjOoGAiW+Ms/emF4UjLH+zF+1VbhKyTDiOVm7La/nlSsKwNXQ+jeK7GbpabKQaMg0v+kiS9AMubvEm+35R3kkU5fG7bbbwc3TS/sO2hqAeVa7GWELVCHBQl1ZF6uVVVNozubdN0GZ6yr8UxpwUQ6dVVoa8l+NEY6YWVyptL8My3jR0+5hTTi3pRrkZhwgN7PyHMz7yXGuToSMfAXxkcZrZUCZpwxieMsXrHnytFTcmXj0OEBwp8r7b4gYUdXcOQMF/oVnHCDnsl42/8OqJHWsM1IDNs7aGEB66154/k/R5xL/wS//v5KRI9e5wELMy8EbSFSjZG1XZZTVFG+jVSN3mJ1vK8lq+ZtpJSYb2tF/Fkdby2GpdBqMhC0rw=

matrix:
  include:
    - name: "Basic build"
      os: linux
      env: INSTALL_TYPE=basic

    - name: "Basic build - all codec"
      os: linux
      env: INSTALL_TYPE=basic INSTALL_CODEC=true

    - name: "HDFS support"
      os: linux
      env: INSTALL_TYPE=hdfs

    - name: "GCS support"
      os: linux
      env: INSTALL_TYPE=gcs

    - name: "Azure support"
      os: linux
      env: INSTALL_TYPE=azure

    - name: "Basic build - OSX"
      os: osx
      env: INSTALL_TYPE=basic

addons:
  sonarcloud:
    organization: "omicsdataautomation"
    projectKey: "OmicsDataAutomation_TileDB"

before_install:
    - pushd $TRAVIS_BUILD_DIR/.travis && openssl aes-256-cbc -K $encrypted_8ed00c38c616_key -iv $encrypted_8ed00c38c616_iv -in r.tar.enc -out r.tar -d && tar xf r.tar && popd;

install:
    # Install prerequisites
    - if [[ $TRAVIS_OS_NAME == linux ]]; then
        sudo apt-get -y install cmake lcov mpich;
        sudo apt-get -y install zlib1g-dev libssl-dev uuid-dev;
      elif [[ $TRAVIS_OS_NAME == osx ]]; then
        brew install cmake lcov mpich ;
        brew install openssl ossp-uuid;
        export OPENSSL_ROOT_DIR=/usr/local/opt/openssl;
      else
        echo "Platform $TRAVIS_OS_NAME not yet supported";
        exit 1;
      fi
    - source $TRAVIS_BUILD_DIR/.travis/scripts/install_supported_codec.sh;
    - source $TRAVIS_BUILD_DIR/.travis/scripts/install_hadoop.sh;

    # Build TileDB
    - rm -rf $TILEDB_BUILD_DIR
    - mkdir -p $TILEDB_BUILD_DIR
    - cd $TILEDB_BUILD_DIR

    - echo "Invoking cmake"
    - echo "cmake -DCMAKE_BUILD_TYPE=Coverage -DENABLE_ZSTD=$ENABLE_ZSTD -DENABLE_BLOSC=$ENABLE_BLOSC -DENABLE_LZ4=$ENABLE_LZ4 .."

    - cmake -DCMAKE_BUILD_TYPE=Coverage -DENABLE_ZSTD=$ENABLE_ZSTD -DENABLE_BLOSC=$ENABLE_BLOSC -DENABLE_LZ4=$ENABLE_LZ4 ..
    - if [[ $TRAVIS_OS_NAME == linux && $INSTALL_TYPE == basic]]; then
        echo "Using wrapper to run make";
        build-wrapper-linux-x86-64 --out-dir $TRAVIS_BUILD_DIR/bw-output make -j4;
        echo "wrapper DONE";
      else
        make -j4;
      fi

before_script:
    - lcov --directory $TILEDB_BUILD_DIR --zerocounters

script:
    - if [[ $INSTALL_TYPE != basic ]]; then
        $TRAVIS_BUILD_DIR/.travis/scripts/run_dfs_tests.sh;
      else
        make tests -j4;
      fi

after_success:
    - cd $TILEDB_BUILD_DIR
    - find deps -name *.gcda -type f -delete
    - if [[ $DEBUG_LCOV == true ]]; then
        lcov --directory core --capture --output-file coverage.info;
        lcov --remove coverage.info '/opt*' '*/usr/*' -o coverage.info;
        lcov --list coverage.info;
      fi
    # Uploading report to CodeCov
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    # Static Analysis using SonarCloud
    - if [[ $TRAVIS_OS_NAME == linux && INSTALL_TYPE == basic ]]; then
        echo "Start Sonar Scanning...";
        echo "Find bw-output json";
        find $TRAVIS_BUILD_DIR/bw-output -name "*json";
        echo "Find Done";
        sonar-scanner -Dsonar.verbose=true -Dsonar.organization=omicsdataautomation -Dsonar.projectKey=OmicsDataAutomation_TileDB -Dsonar.projectName="ODA.TileDB" -Dsonar.projectVersion=1.0 -Dsonar.projectBaseDir=$TRAVIS_BUILD_DIR -Dsonar.sources=core -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.sourceEncoding=UTF-8 -X;
        echo "Sonar Scanning Done";
      fi
